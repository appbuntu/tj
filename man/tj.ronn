tj(1) -- WordPress development made easy
========================================

## SYNOPSIS

`tj` [<command>] [--flag=<arg>] [--flag]

## DESCRIPTION

Theme Juice (tj(1)) is a command line utility that allows you to generate,
manage and deploy new local WordPress development applications in seconds
using vagrant(1), utilizing an apache(7) fork of vvv(7) called vvv-apache(7)
as the virtual machine.

## GLOBAL OPTIONS

  * `--vm-box`=<repository>:
    Force vagrant(1) box for use as VM

  * `--vm-path`=<path>:
    Force path to VM

  * `--vm-ip`=<ip>:
    Force IP address of VM

  * `--vm-prefix`=<string>:
    Force directory prefix for project in VM

  * `--yolo`:
    Say yes to anything and everything, and maybe even get a few surprises

  * `--boring`:
    Prints all output without any fancy formatting

  * `--no-unicode`:
    Prints all output without unicode characters

  * `--no-colors`, `--no-color`:
    Prints all output without color

  * `--no-animations`:
    Prints all output without animations

  * `--no-landrush`:
    Disable the landrush(1) gem for managing DNS

  * `--no-port-forward`, `--no-port-forwarding`:
    Disable automatic port forwarding

  * `--verbose`:
    Prints out additional logging information

  * `--quiet`, `--shh`:
    Suppresses all command output

  * `--trace`:
    Raises any exceptions caught during runtime

  * `--dryrun`, `--dry-run`:
    Run a command without actually doing anything

  * `--nginx`, `--no-apache`:
    Create `conf` files for nginx(7) instead of apache(7)

## PRIMARY COMMANDS

Run `tj help` [<command>] to view an individual command's man page.

  * create(1), `new`, `mk`:
    Create a new project

  * setup(1), `up`, `init`:
    Setup an existing project

  * delete(1), `rm`, `remove`, `trash`:
    Delete a project

  * deploy(1), `server`, `remote`:
    Deploy a project

## SECONDARY COMMANDS

  * `version`, `--version`, `-v`:
    Print the current version

  * `list`, `ls`, `projects`, `apps`, `sites`:
    List all projects

  * `vm`, `vagrant`, `vvv`=[<command>[,<command>]...]:
    Manage development environment via vagrant(1). Commands are proxied to
    your Vagrant installation so that they can be run from any directory.

## CONFIG COMMANDS

These run the corresponding command from your project's config file. They
accept any number of arguments, since the behavior and handling of input is
defined within the config file itself. Below are the commands defined within
the Theme Juice starter template.

  * `install`=[<arg>[,<arg>]...]:
    Run installation for project

  * `watch`=[<arg>[,<arg>]...]:
    Manage and run development build tools

  * `assets`=[<arg>[,<arg>]...]:
    Manage front-end dependencies for project

  * `vendor`=[<arg>[,<arg>]...]:
    Manage back-end dependencies for project

  * `dist`=[<arg>[,<arg>]...]:
    Package project for distribution

  * `wp`=[<arg>[,<arg>]...]:
    Manage project's wordpress(7) installation with wp-cli(1)

  * `backup`=[<arg>[,<arg>]...]:
    Backup project

  * `test`=[<arg>[,<arg>]...]:
    Manage and run project tests

## CONFIG FILE

A YAML Juicefile(5) configuration can be used to store commonly-used
build scripts, similar to npm(1) scripts. Each command block sequence can be
mapped to an individual project's build tool, allowing a streamlined set of
commands to be used across multiple projects that utilize different tools.

  * `commands`:
    Collection of various command block sequences

  * `commands.install`:
    Command sequence used to properly install and build project

  * `commands.watch`:
    Command used to manage development build tools

  * `commands.assets`:
    Command used to manage front-end dependencies

  * `commands.vendor`:
    Command used to manage back-end dependencies

  * `commands.wp`:
    Command used to manage WordPress installation

  * `commands.dist`:
    Commands used to package project for distribution

  * `commands.backup`:
    Commands used to backup project

  * `commands.test`:
    Command used to manage and run project tests

Placeholder arguments can be used within any command block sequence to
allow splat or indexed arguments to be passed to the corresponding
command when executed.

  * `%args%`, `%arguments%`:
    Splat argument placeholder e.g. `cmd %args%`

  * `%argN%`, `%argumentN%`:
    Where `n` is the argument index e.g. `cmd %arg1% | cmd %arg2%`

When naming your configuration file, use the recommended `Juicefile`, or
`.tj.yaml` naming convention. The raw filename regex matcher is below if
you want to be a little different.

  `/^(((\.)?(tj)|((J|j)uicefile))(\.y(a)?ml)?$)/`

## ENVIRONMENT

All of the global options have a corresponding `ENV` variable that can be set
to permanently use the specified value each time tj(1) is run. This is useful
if you're using an alternate vagrant(1) box, or if you need to disable certain
features due to limited support e.g. on Windows.

  * `TJ_VM_BOX`=<repository>:
    Force vagrant(1) box for use as VM

  * `TJ_PATH`=<path>:
    Force path to VM

  * `TJ_IP`=<ip>:
    Force IP address of VM

  * `TJ_PREFIX`=<string>:
    Force directory prefix for project in VM

  * `TJ_YOLO`=<bool>:
    Say yes to anything and everything, and maybe even get a few surprises

  * `TJ_BORING`=<bool>:
    Prints all output without any fancy formatting

  * `TJ_NO_UNICODE`=<bool>:
    Prints all output without unicode characters

  * `TJ_NO_COLORS`=<bool>:
    Prints all output without color

  * `TJ_NO_ANIMATIONS`=<bool>:
    Prints all output without animations (coming soon)

  * `TJ_NO_LANDRUSH`=<bool>:
    Disable the landrush(1) gem for managing DNS

  * `TJ_NO_PORT_FORWARD`=<bool>:
    Disable automatic port forwarding

  * `TJ_VERBOSE`=<bool>:
    Prints out additional logging information

  * `TJ_QUIET`=<bool>:
    Suppresses all command output

  * `TJ_TRACE`=<bool>:
    Raises any exceptions caught during runtime

  * `TJ_DRYRUN`=<bool>:
    Run a command without actually doing anything

  * `TJ_NGINX`=<bool>:
    Create `conf` files for nginx(7) instead of apache(7)
